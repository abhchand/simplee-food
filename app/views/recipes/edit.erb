<%#
  This template is used by both the "edit" and "new" actions.

  In the case of the "new" action, `@recipe` will be a newly instantiated
  `Recipe` object that is not yet persisted
%>
<div class="content">
  <%= erb(:"shared/nav") %>

  <div class="recipe-title-bar">
    <h1><%= @recipe.persisted? ? 'Edit Recipe' : 'New Recipe' %></h1>
    <button onClick="SimpleeFood.onEditRecipeSubmit(event)" class="recipes-edit__save-btn btn--hollow">
      Save
    </button>
  </div>

  <%= erb(:"shared/flash") %>

  <form class="recipes-edit__form" data-recipe-slug="<%= @recipe.slug %>" onSubmit="SimpleeFood.onEditRecipeSubmit(event)">
    <div class="recipes-edit__image-preview">
      <img
        class="recipes-edit__image-preview"
        src="data:<%= @recipe.image || recipe_image_placeholder %>">
    </div>
    <input
      class="recipes-edit__image-select"
      onChange="SimpleeFood.onImageSelect(event)"
      type="file"
      name="recipe[image]"
      id="file-upload"
      accept=".jpg, .jpeg, .png">
    <label for="file-upload" class="recipes-edit__image-select-label btn--hollow">Upload New Image</label>

    <div class="recipes-edit__field-block">
      <label for="recipe_name">name</label>
      <input id="recipe_name" name="recipe[name]" value="<%= @recipe.name %>"/>
    </div>

    <div class="recipes-edit__field-block">
      <label for="recipe_source_url">original url</label>
      <input id="recipe_source_url" name="recipe[source_url]" value="<%= @recipe.source_url %>"/>
    </div>

    <div class="recipes-edit__field-block">
      <label for="recipe_serving_size">serving size</label>
      <input id="recipe_serving_size" name="recipe[serving_size]" value="<%= @recipe.serving_size %>"/>
    </div>

    <%# Edit Ingredients %>
    <div class="recipes-edit__field-block" id="recipe-ingredients">
      <h3>ingredients</h3>
      <ul class="recipes-edit__sortable-list">
        <% @recipe.ingredients.each_with_index do |ingredient, idx| %>
          <%#
            this <li> is reconstructed programmatically in JS, so any changes
            here should be updated in the JS logic as well
          %>
          <li class="recipes-edit__sortable-list-row">
            <input name="recipe[ingredients][<%= idx %>]" value="<%= ingredient %>" />
            <button type="button" onclick="SimpleeFood.moveSortableListItemUp(event)">
              <%= svg_icon(:arrow_up) %>
            </button>
            <button type="button" onclick="SimpleeFood.moveSortableListItemDown(event)">
              <%= svg_icon(:arrow_down) %>
            </button>
            <button type="button" onclick="SimpleeFood.deleteSortableListItem(event)">
              <%= svg_icon(:trash) %>
            </button>
          </li>
        <% end %>
      </ul>

      <div class="recipes-edit__sortable-list-actions">
        <button
          type="button"
          class="recipes-edit__add-sortable-item-btn btn--hollow"
          onclick="SimpleeFood.addSortableListItem('recipe-ingredients')">
          add
        </button>
        <button
          type="button"
          class="recipes-edit__bulk-add-sortable-item-btn btn--hollow"
          onclick="SimpleeFood.openBulkAddModal('recipe-ingredients')">
          bulk add
        </button>

        <%# render the modal, which is hidden by default until opened %>
        <div class="modal modal--closed recipes-edit__bulk-add-sortable-item-modal">
          <div class="modal-content">
            <h2>Bulk Add Ingredients</h2>
            <p>Enter multiple ingredients here. Each line will be added as a separate ingredient.</p>
            <textarea class="modal-textarea"></textarea>
            <button
              type="button"
              class="recipes-edit__bulk-add-sortable-item-close-btn btn--hollow"
              onclick="SimpleeFood.closeBulkAddModal('recipe-ingredients')">
              cancel
            </button>
            <button
              type="button"
              class="recipes-edit__bulk-add-sortable-item-open-btn btn--hollow"
              onclick="SimpleeFood.bulkAddSortableListItems('recipe-ingredients')">
              add
            </button>
          </div>
        </div>
      </div>
    </div>


    <%# Edit Instructions %>
    <div class="recipes-edit__field-block" id="recipe-instructions">
      <h3>steps</h3>
      <ul class="recipes-edit__sortable-list">
        <% @recipe.steps.each_with_index do |instruction, idx| %>
          <%#
            this <li> is reconstructed programmatically in JS, so any changes
            here should be updated in the JS logic as well
          %>
          <li class="recipes-edit__sortable-list-row">
            <textarea name="recipe[instructions][<%= idx %>]" style="resize: none;"><%= instruction %></textarea>
            <button type="button" onclick="SimpleeFood.moveSortableListItemUp(event)">
              <%= svg_icon(:arrow_up) %>
            </button>
            <button type="button" onclick="SimpleeFood.moveSortableListItemDown(event)">
              <%= svg_icon(:arrow_down) %>
            </button>
            <button type="button" onclick="SimpleeFood.deleteSortableListItem(event)">
              <%= svg_icon(:trash) %>
            </button>
          </li>
        <% end %>
      </ul>

      <div class="recipes-edit__sortable-list-actions">
        <button
          type="button"
          class="recipes-edit__add-sortable-item-btn btn--hollow"
          onclick="SimpleeFood.addSortableListItem('recipe-instructions')">
          add
        </button>
        <button
          type="button"
          class="recipes-edit__bulk-add-sortable-item-btn btn--hollow"
          onclick="SimpleeFood.openBulkAddModal('recipe-instructions')">
          bulk add
        </button>

        <%# render the modal, which is hidden by default until opened %>
        <div class="modal modal--closed recipes-edit__bulk-add-sortable-item-modal">
          <div class="modal-content">
            <h2>Bulk Add Instructions</h2>
            <p>Enter multiple instructions here. Each line will be added as a separate instruction.</p>
            <textarea class="modal-textarea"></textarea>
            <button
              type="button"
              class="recipes-edit__bulk-add-sortable-item-close-btn btn--hollow"
              onclick="SimpleeFood.closeBulkAddModal('recipe-instructions')">
              cancel
            </button>
            <button
              type="button"
              class="recipes-edit__bulk-add-sortable-item-open-btn btn--hollow"
              onclick="SimpleeFood.bulkAddSortableListItems('recipe-instructions')">
              add
            </button>
          </div>
        </div>
      </div>
    </div>


    <div class="recipes-edit__field-block">
      <h3>tags</h3>

      <ul class="recipes-edit__tags">
      <% @tags.each do |tag| %>
        <% id = "recipe_tag_ids_#{tag.slug}" %>
        <li>
          <input
            type="checkbox"
            id="<%= id %>"
            name="recipe[tag_ids][]"
            <%= 'checked' if @recipe.tags.include?(tag) %>
            value="<%= tag.id %>">
          <label for="<%= id %>"><%= tag.name %></label>
        </li>
      <% end %>
      </ul>

      <button
        type="button"
        class="recipes-edit__add-tag-btn btn--hollow"
        onclick="SimpleeFood.onAddTag()">
        add new tag
      </button>
    </div>

    <%#
      this exists purely so that we can copy these icons when programmatically
      building DOM elements in JS
    %>
    <div id="reference_icons" style="display: none;">
      <div class="arrow-down"><%= svg_icon(:arrow_down) %></div>
      <div class="arrow-up"><%= svg_icon(:arrow_up) %></div>
      <div class="trash"><%= svg_icon(:trash) %></div>`
    </div>

    <button type="submit" class="recipes-edit__save-btn btn--hollow">
      Save
    </button>

    <a href="<%= @recipe.persisted? ? "/recipes/#{@recipe.slug}" : '/recipes' %>">
      <button type="button" class="recipes-edit__cancel-btn btn--hollow">
        cancel
      </button>
    </a>
  </form>
</div>
