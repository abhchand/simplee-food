import copy from 'rollup-plugin-copy';
import outputManifest from 'rollup-plugin-output-manifest';
import scss from 'rollup-plugin-scss';
import { uglify } from 'rollup-plugin-uglify';

const isProduction = process.env.NODE_ENV === 'production';

const path = require('path');
const SRC_DIR = path.resolve(__dirname, 'app', 'frontend');
const PUBLIC_DIR = path.resolve(__dirname, 'public');

const config = {
  input: `${SRC_DIR}/js/index.js`,
  output: {
    // scss plugin uses `assetFileNames` for its naming pattern
    assetFileNames: '[name]-[hash][extname]',
    // This only minifies the rollup boilerplate code, not any user code
    compact: true,
    dir: PUBLIC_DIR,
    entryFileNames: 'application-[hash].js',
    format: 'iife',
    name: 'SimpleeFood'
  },
  watch: {
    chokidar: {
      // `--watch` only watches for JS files under this path. To watch for
      // scss changes we need to configure the same dirs under the `scss` plugin
      paths: 'app/frontend/**/*'
    }
  },
  plugins: [
    scss({
      // The name of the output CSS file, but it will be transformed to fit
      // the pattern specified by `assetFileNames` above
      name: 'application.css',
      outputStyle: isProduction ? 'compressed' : null,
      // Tells `--watch` to also watch the below dirs for SCSS file changes
      watch: ['app/frontend/stylesheets']
    }),
    copy({
      targets: [{ src: 'app/frontend/images/**/*', dest: 'public/images' }]
    }),
    /*
     * The manifest spits out "application.css.css" as the key for the
     * `stylesheets/index.scss` input. This is both the wrong name and a
     * duplicate extension.
     *
     * The source of the issue is that `stylesheets/index.scss` is not an
     * entrypoint defined in this config. It is dynamically generated by the
     * `scss()` plugin above, so the chunk name becomes whatever `name` was
     * specified as an option to that plugin ("application.css") instead of
     * "index" (no extension).
     *
     * This can be fixed by providing a custom `generate()` function using the
     * `generate:` option. By default it uses this generator:
     *
     *    https://github.com/shuizhongyueming/rollup-plugin-output-manifest/blob/v2.0.0/packages/main/src/index.ts#L69-L73
     *
     * But this can be overridden and the logic can update `name` appropriately
     * before `keyValueDecorator()` is called. For now we don't bother with it,
     * but it could be more useful if generating multiple CSS files in the
     * future.
     */
    outputManifest()
  ]
};

if (isProduction) {
  config.plugins.push(uglify());
}

export default config;
